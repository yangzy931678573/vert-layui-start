plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '2.0.2'
}

repositories {
    jcenter()
}

version = '1.0-SNAPSHOT'
sourceCompatibility = '1.8'
mainClassName = 'io.vertx.core.Launcher'

def startVersion = '3.5.1'
def mainStartName = 'start.application.MainApplication'
def watchForChange = 'src/**/*'
def doOnChange = 'gradlew classes'

dependencies {
    compile "io.vertx:vertx-core:$startVersion"
    compile "io.vertx:vertx-web:$startVersion"
    compile "ch.qos.logback:logback-classic:1.2.3"
    compile "io.vertx:vertx-mysql-postgresql-client:$startVersion"
    compileOnly "io.vertx:vertx-codegen:$startVersion"
    testCompile "junit:junit:4.12"
    testCompile "io.vertx:vertx-unit:$startVersion"
}

shadowJar {
    classifier = 'fat'
    manifest {
        attributes "Main-Verticle": mainStartName
    }
    mergeServiceFiles {
        include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
    }
}

run {
    args = ['run', mainStartName, "--redeploy=$watchForChange", "--launcher-class=$mainClassName", "--on-redeploy=$doOnChange"]
}

jar {
    archiveName = 'vertx-start.jar'
    manifest {
        attributes "Main-Class": "io.vertx.core.Launcher",
                "Main-Verticle": "start.application.MainApplication"
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.5.1'
}

task annotationProcessing(type: JavaCompile, group: 'build') {
    source = sourceSets.main.java
    classpath = configurations.compile + configurations.compileOnly
    destinationDir = project.file('src/main/generated')
    options.compilerArgs = [
            "-proc:only",
            "-processor", "io.vertx.codegen.CodeGenProcessor",
            "-Acodegen.output=${destinationDir.absolutePath}"
    ]
}

sourceSets {
    main {
        java {
            srcDirs += 'src/main/generated'
        }
    }
}

compileJava {
    targetCompatibility = 1.8
    sourceCompatibility = 1.8

    dependsOn annotationProcessing
}
tasks.withType(Javadoc) {
    options.encoding = "UTF-8"
}